<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>patterns on Anes Hasicic</title><link>https://anes.io/tags/patterns/</link><description>Recent content in patterns on Anes Hasicic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://anes.io/tags/patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Domain Driven Design and Pattern Thinking</title><link>https://anes.io/posts/domain-driven-design-and-pattern-thinking/</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate><guid>https://anes.io/posts/domain-driven-design-and-pattern-thinking/</guid><description>Design patterns are very useful things in general and they pop up a lot if you are applying DDD in an OOP context (If you’re there you are probably already applying Tactical DDD patterns).
One principle I want to emphasize here because I see so many violations of it, is the following: Don’t use pattern names when implementing a pattern. It’s amazing how people keep missing the point.
Applying this principle is actually very helpful in double checking if you are applying the right pattern to the right thing.</description></item></channel></rss>