<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ports and adapters on Anes Hasicic</title><link>https://anes.io/tags/ports-and-adapters/</link><description>Recent content in ports and adapters on Anes Hasicic</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://anes.io/tags/ports-and-adapters/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Functional Use Cases</title><link>https://anes.io/posts/go-functional-use-cases/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://anes.io/posts/go-functional-use-cases/</guid><description>I like functions, especially higher-order ones and I think we often underestimate their power when working with Go.
More often than not, we jump to creating a type and attaching a method to it when maybe a simple regular or higher-order function would do (standard library surely, makes use of this eg. http.HandlerFunc).
I employ this approach often and I figured it wouldn’t hurt to share it.
Where does this come from?</description></item><item><title>Event Sourcing with Go and Hexagonal Architecture</title><link>https://anes.io/posts/event-sourcing-with-go-and-hexagonal-architecture/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://anes.io/posts/event-sourcing-with-go-and-hexagonal-architecture/</guid><description>Not long ago I have slowly started preparing material for a pragmatic hands-on book I’ve always wanted to write on the topic of event sourcing, where I would explore it in my own approachable way, applicable to any skill level while also spicing it up with golang, ports and adapters, tdd, testing, event driven architecture and good software engineering practices in general.
It’s still early days and I am still fleshing it out.</description></item><item><title>Hexagonal Architecture in Go</title><link>https://anes.io/posts/hexagonal-architecture-in-go/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>https://anes.io/posts/hexagonal-architecture-in-go/</guid><description>Hexagonal / Ports and Adapters architecture in insert your language here
How many of these have you seen before? Probably too many, but I promise, this will be a short one…
Why another article? First, I have a confession to make. I have had this article in my backlog for at least four years now but have never “gotten around” to finishing it due to numerous reasons (the biggest one me simply being lazy).</description></item></channel></rss>